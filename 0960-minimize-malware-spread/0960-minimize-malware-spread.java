class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        Arrays.sort(initial);
        int n = graph.length, ans = initial[0] , max = 0;

        HashSet<Integer> infected = new HashSet<>();
        //Putting all the infected nodes given to us in the set
        for(int i : initial){
            infected.add(i);
        }

        //tr removing each node and see which is the result
        for(int i : initial){
            infected.remove(i); //temporarily removing this node because we are checking if this node is having the more no. of nodes in component
            //Now, count how many safe nodes can be infected by this infeted node
            int count = dfs(graph, i, new boolean[n] , infected);  //Count the total no. of nodes in the component

            if(count > max){
                //If the no. of nodes in the component is more than previously expected or counted
                max = count; //Ab max woh count ho gya;
                ans = i;   //Aur jo infected node jiske paass itne saare nodes hai component mei, woh ab answer hoga na
                
            }
            infected.add(i);
        }
        return ans;
    }

    private int dfs(int[][] graph, int node, boolean[] visited, HashSet<Integer> infected){
        ///Component contains more than one infected node
        //So removing it will nlt impact result

        if(infected.contains(node)) return 0;   //If the node is still infected (except the one we removed), we stop.


        if(visited[node]) return 0;

        visited[node] = true;
        int count = 1;
        for(int neighbor = 0 ;neighbor < graph[node].length;neighbor++){
            if(!visited[neighbor] && graph[node][neighbor] == 1){
                int numInfectedNodes = dfs(graph, neighbor, visited, infected);
                /*If during this counting , we encountered another indected node, then others can still get infected , so no use of removing it */
                if(numInfectedNodes == 0) return 0;  // another infected node found in this component
                count+= numInfectedNodes;
            }
        }
        return count;
    }
}